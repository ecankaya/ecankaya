DROP TABLE Mitarbeiter CASCADE CONSTRAINTS;
DROP TABLE Bestellung CASCADE CONSTRAINTS;
DROP TABLE Menü CASCADE CONSTRAINTS;
DROP TABLE Artikel CASCADE CONSTRAINTS;
DROP TABLE Geschäftsstelle CASCADE CONSTRAINTS;
DROP TABLE ArtikelBestellung CASCADE CONSTRAINTS;
DROP TABLE Hauptspeise CASCADE CONSTRAINTS;
DROP TABLE Beilage CASCADE CONSTRAINTS;
DROP TABLE Getränk CASCADE CONSTRAINTS;
DROP TABLE Gehaltsklasse CASCADE CONSTRAINTS;
DROP TABLE Schärfescala CASCADE CONSTRAINTS;

--SQL Script Elektronisches Bestellsysdtem
CREATE TABLE Schärfescala(
    Schärfeklasse INTEGER PRIMARY KEY,
    scovil_min    INTEGER,
    scovil_max    Integer
);

CREATE Table Artikel(
    Artikel_ID INTEGER,
    Name varchar2(50) NOT NULL,
    Kallorien INTEGER,
    Preis FLOAT NOT NULL,
    Allergencode Varchar2(8),
    Primary Key(Artikel_ID),
    Typ VARCHAR2(1) NOT NULL  CONSTRAINT   SUB_TypChk_abs CHECK ( UPPER(typ) IN                    /* Diskriminator (Vererbung) mit H(Hauptspeise), B(Beilage) und G(Getränke)*/
                                   ('H','B','G','M') ) INITIALLY IMMEDIATE

);

CREATE TABLE Hauptspeise(
    Artikel_ID INTEGER,
    Schärfeklasse Integer,
    Scovil INTEGER,
    Foreign Key (Artikel_ID) References Artikel(Artikel_ID),
    FOREIGN KEY (Schärfeklasse) REFERENCES Schärfescala(Schärfeklasse)

    );

CREATE TABLE Beilage(
    Artikel_ID INTEGER,
    Schärfeklasse INTEGER,
    Scovil INTEGER,
    Größe Varchar2(20),
    Foreign Key (Artikel_ID) References Artikel(Artikel_ID),
    FOREIGN KEY (Schärfeklasse) REFERENCES Schärfescala(Schärfeklasse)

    );

CREATE TABLE Getränk(
    Artikel_ID INTEGER,
    Eis VARCHAR2(4), 
    Größe Varchar2(20),
    Foreign Key (Artikel_ID) References Artikel(Artikel_ID)
                            
    );

CREATE TABLE Menü(
    Artikel_ID INTEGER,
    Hauptspeise INTEGER NOT NUll,                          /* Menü muss immer 1 Artikel haben*/
    Beilage INTEGER NULL,
    Getränk INTEGER NULL,
    Scovil INTEGER,
    FOREIGN KEY (Hauptspeise) REFERENCES Artikel(Artikel_ID),
    FOREIGN KEY (Beilage) REFERENCES Artikel(Artikel_ID),
    FOREIGN KEY (Getränk) REFERENCES Artikel(Artikel_ID),
    Foreign Key (Artikel_ID) References Artikel(Artikel_ID)
);

CREATE TABLE Geschäftsstelle(
    Geschäftsstelle_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(50) NOT NULL,
    ORT VARCHAR2(50) NOT NULL,
    LAND VARCHAR2(50) NOT NULL,
    Arbeitszeitvolumen INTEGER NOT NULL,
    AnzahlBestellungen INTEGER,
    Nebenkosten Float,
    Umsatz Float
);

CREATE TABLE Gehaltsklasse(
    GEH_KLASSE INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MIN_GEHALT NUMBER,
    MAX_GEHALT NUMBER    
);

CREATE TABLE Mitarbeiter(
    Mitarbeiter_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(50) NOT NULL,
    Vorname VARCHAR2(50) NOT NULL,
    Ort  VARCHAR2(50) NOT NULL,
    Straße VARCHAR2(50) NOT NULL,
    Telefon INTEGER,
    Email VARCHAR2(50) CONSTRAINT stEmailSyntax CHECK (email LIKE '%@%.__'              /*E-Mail Format check */
							OR email LIKE '%@%.___') INITIALLY DEFERRED,
    Gehalt FLOAT NOT NULL,
    GEH_KLASSE INTEGER,
    Arbeitszeit INTEGER NOT NULL,
    Geschäftsstelle_ID INTEGER,
    FOREIGN KEY (Geschäftsstelle_ID) REFERENCES Geschäftsstelle(Geschäftsstelle_ID),
    FOREIGN KEY (GEH_KLASSE) REFERENCES Gehaltsklasse(GEH_KLASSE)
);

CREATE TABLE Bestellung(
    Bestellung_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nettoGesamtpreis FLOAT,
    bruttoGesamtpreis FLOAT,
    Währung VARCHAR2(3),
    Bezahlmethode VARCHAR2(3),                  /* atm BAR oder EC */
    Mitnehmen VARCHAR2(1) ,                    /*(j/n) modell     */
    Bestellzeit TIMESTAMP,
    Allergencode VARCHAR2(8),
    Status INTEGER,
    Payback INTEGER,
    Mitarbeiter_ID INTEGER,
    Geschäftsstelle_ID INTEGER,
    FOREIGN KEY (Geschäftsstelle_ID) REFERENCES Geschäftsstelle(Geschäftsstelle_ID),
    FOREIGN KEY (Mitarbeiter_ID) REFERENCES Mitarbeiter(Mitarbeiter_ID)    

);

CREATE TABLE ArtikelBestellung(
    Artikel_ID INTEGER,
    Bestellung_ID INTEGER,
    Anzahl INTEGER,
    Schärfeklasse INTEGER,  
    FOREIGN KEY (Bestellung_ID) REFERENCES Bestellung(Bestellung_ID),
    FOREIGN KEY (Artikel_ID) REFERENCES Artikel(Artikel_ID)

);

Alter table bestellung add constraint mitnehmen_check CHECK ( Mitnehmen = 'J' OR Mitnehmen = 'N');
Alter table bestellung add constraint bezahlmethode Check ( Bezahlmethode = 'BAR' OR Bezahlmethode ='EC');
------------------------------------------------------------------------------
TRUNCATE TABLE Mitarbeiter  ;
TRUNCATE TABLE Bestellung  ;
TRUNCATE TABLE Menü  ;
TRUNCATE TABLE Artikel  ;
TRUNCATE TABLE Geschäftsstelle  ;
TRUNCATE TABLE ArtikelBestellung  ;
TRUNCATE TABLE Hauptspeise  ;
TRUNCATE TABLE Beilage  ;
TRUNCATE TABLE Getränk  ;
TRUNCATE TABLE Gehaltsklasse  ;
TRUNCATE TABLE Schärfescala  ;
--mehrmals ausfuehren

--Vorbedingung
insert into Geschäftsstelle Values (default, 'Filiale 1','KÖLN','DEUTSCHLADN', 400, 29,0.19,80000);
insert into Geschäftsstelle Values (default, 'Filiale 2','NEW YORK','USA', 1200, 829,0.05,180000);

insert into Gehaltsklasse Values (default,0, 450);
insert into Gehaltsklasse Values (default,451 ,1999);
insert into Gehaltsklasse Values (default,2000, 3999);
insert into Gehaltsklasse Values (default,4000, 5999);
insert into Gehaltsklasse Values (default,6000, 7999);
insert into Gehaltsklasse Values (default,8000, 10000);

insert into Mitarbeiter values ( default,'Lustig','Peter','Köln', 'Vinlogasse 12',0176123456789,'bsp@th-koeln.de', 2500,4, 38,1);
insert into Mitarbeiter values ( default,'Lang','lara','Rössrath', 'Haupstraße 39',0176978654321,'bsp2@th-koeln.de', 2700,4, 40,1);

Insert into artikel values (1,'Cola',400,2.99,'E1','G');
Insert into artikel values (2,'Wasser',0,1.99,NULL,'G');
Insert into artikel values (3,'Eistee',400,2.99,NULL,'G');

CREATE OR REPLACE TRIGGER TRG_minBestellWert
BEFORE INSERT ON bestellung
FOR EACH ROW
DECLARE  minWert CONSTANT FLOAT := 5.00;
BEGIN
    IF :New.nettoGesamtpreis < minWert then RAISE_APPLICATION_ERROR(-20001,'mindestbestellmenge unterschritten');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRG_BZEIT
BEFORE INSERT ON BESTELLUNG
FOR EACH ROW
BEGIN 
     IF :NEW.bestellzeit != SYSDATE then :NEW.bestellzeit := SYSTIMESTAMP ;
     END IF;
END; 
/
CREATE OR REPLACE PROCEDURE gehaltserhoehung(p_mitarbeiter mitarbeiter.mitarbeiter_id%type, p_rate FLOAT )
AS
BEGIN
    IF p_rate < 1 then RAISE_APPLICATION_ERROR(-20010,'gehalt darf nicht gekürzt werden');
    END IF;
    UPDATE Mitarbeiter SET gehalt = gehalt * p_rate WHERE mitarbeiter_id = p_mitarbeiter;
END;
/
CREATE OR REPLACE VIEW vw_artikel AS SELECT * FROM artikel;

CREATE OR REPLACE TRIGGER trg_insert_artikel 
    INSTEAD OF INSERT ON vw_artikel
    FOR EACH ROW 
DECLARE
    l_artikel_id NUMBER;
BEGIN
    INSERT INTO artikel (Artikel_ID ,Kallorien ,Name ,Preis ,Allergencode,typ)
    VALUES(:NEW.Artikel_ID, :NEW.Kallorien,:NEW.Name, :NEW.Preis, :NEW.Allergencode,:NEW.typ)   
    RETURNING artikel_id into l_artikel_id;
END;
/
CREATE OR REPLACE TRIGGER trg_delete_artikel 
    INSTEAD OF DELETE ON vw_artikel
    FOR EACH ROW 
BEGIN
    DELETE FROM ARTIKEL WHERE artikel_id = :OLD.artikel_id;
END;
/
CREATE OR REPLACE TRIGGER trg_update_artikel 
    INSTEAD OF UPDATE ON vw_artikel
    FOR EACH ROW 
BEGIN
    UPDATE artikel SET Kallorien = :NEW.kallorien ,Name = :NEW.name ,Preis = :NEW.preis ,Allergencode = :NEW.Allergencode ,typ = :NEW.typ
    WHERE ARTIKEL_ID = :OLD.Artikel_id;
END;
/
--Testfall für BZEIT
insert into bestellung values(default,10.00,6.87,'JPY','EC','J','25.03.2005','A,E1',1,NULL,1,1 );  --Das datum wird stattdessen zur systemzeit geändert

Select * from bestellung; 


--Negativer testfall für minBestellwert
insert into bestellung values(default,10.00,6.87,'JPY','BAR','J',SYSTIMESTAMP,'A,E1',1,NULL,1,1 ); --trigger feuert nicht 
--Positiver testfall für minBestellwert
insert into bestellung values(default,4.99,2.87,'JPY','EC','J','25.03.2005','A,E1',1,NULL,1,1 ); --trigger feuert,Raise error(20001)
--bestellung wurde von trigger abgefangen
Select * from bestellung;


--Positiver Testfall für gehaltserhoehung

--before procedure gehalt = 2500
Select gehalt From mitarbeiter where mitarbeiter_id = 1;

--erhoehe gehalt von Peter um 1%
EXECUTE gehaltserhoehung(1, 1+(1/100)); 

--after procedure gehalt = 2500 + 25
Select gehalt From mitarbeiter where mitarbeiter_id = 1;

--negativer testfall für gehaltserhoehung
EXECUTE gehaltserhoehung(1, 1-(1/100));

SELECT * FROM vw_artikel;

--Test trigger insert on view
INSERT INTO vw_artikel Values (22,'FN burger',300,9.99,'A,E1','M');
--füge FN burger in die table
SELECT * FROM artikel;

--Test trigger delete on view
delete from vw_artikel where artikel_id = 22;

-- FN burger wurde gelöscht
SELECT * FROM artikel;

--Test update trigger
UPDATE vw_artikel SET name = 'Nuggetburger' where artikel_id = 1;

--der erste artikel heißst nun nuggetbruger
SELECT * FROM artikel where artikel_id = 1;



